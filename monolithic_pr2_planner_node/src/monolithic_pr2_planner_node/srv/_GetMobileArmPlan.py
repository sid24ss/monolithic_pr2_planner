"""autogenerated by genpy from monolithic_pr2_planner_node/GetMobileArmPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GetMobileArmPlanRequest(genpy.Message):
  _md5sum = "b078a910e80af23a8385e26f615eb5cf"
  _type = "monolithic_pr2_planner_node/GetMobileArmPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/PoseStamped start


bool underspecified_start

int8 planning_mode
float64 allocated_planning_time


float64[] rarm_start
float64[] larm_start
float64[] body_start
float64[] rarm_goal
float64[] larm_goal
float64[] body_goal


geometry_msgs/PoseStamped goal


float64 xyz_tolerance
float64 roll_tolerance
float64 pitch_tolerance
float64 yaw_tolerance


geometry_msgs/PoseStamped rarm_object


geometry_msgs/PoseStamped larm_object

float64 initial_eps
float64 final_eps
float64 dec_eps

int8 planner_type
int8 meta_search_type


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['start','underspecified_start','planning_mode','allocated_planning_time','rarm_start','larm_start','body_start','rarm_goal','larm_goal','body_goal','goal','xyz_tolerance','roll_tolerance','pitch_tolerance','yaw_tolerance','rarm_object','larm_object','initial_eps','final_eps','dec_eps','planner_type','meta_search_type']
  _slot_types = ['geometry_msgs/PoseStamped','bool','int8','float64','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','geometry_msgs/PoseStamped','float64','float64','float64','float64','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','float64','float64','float64','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,underspecified_start,planning_mode,allocated_planning_time,rarm_start,larm_start,body_start,rarm_goal,larm_goal,body_goal,goal,xyz_tolerance,roll_tolerance,pitch_tolerance,yaw_tolerance,rarm_object,larm_object,initial_eps,final_eps,dec_eps,planner_type,meta_search_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMobileArmPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.underspecified_start is None:
        self.underspecified_start = False
      if self.planning_mode is None:
        self.planning_mode = 0
      if self.allocated_planning_time is None:
        self.allocated_planning_time = 0.
      if self.rarm_start is None:
        self.rarm_start = []
      if self.larm_start is None:
        self.larm_start = []
      if self.body_start is None:
        self.body_start = []
      if self.rarm_goal is None:
        self.rarm_goal = []
      if self.larm_goal is None:
        self.larm_goal = []
      if self.body_goal is None:
        self.body_goal = []
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.xyz_tolerance is None:
        self.xyz_tolerance = 0.
      if self.roll_tolerance is None:
        self.roll_tolerance = 0.
      if self.pitch_tolerance is None:
        self.pitch_tolerance = 0.
      if self.yaw_tolerance is None:
        self.yaw_tolerance = 0.
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      if self.initial_eps is None:
        self.initial_eps = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.dec_eps is None:
        self.dec_eps = 0.
      if self.planner_type is None:
        self.planner_type = 0
      if self.meta_search_type is None:
        self.meta_search_type = 0
    else:
      self.start = geometry_msgs.msg.PoseStamped()
      self.underspecified_start = False
      self.planning_mode = 0
      self.allocated_planning_time = 0.
      self.rarm_start = []
      self.larm_start = []
      self.body_start = []
      self.rarm_goal = []
      self.larm_goal = []
      self.body_goal = []
      self.goal = geometry_msgs.msg.PoseStamped()
      self.xyz_tolerance = 0.
      self.roll_tolerance = 0.
      self.pitch_tolerance = 0.
      self.yaw_tolerance = 0.
      self.rarm_object = geometry_msgs.msg.PoseStamped()
      self.larm_object = geometry_msgs.msg.PoseStamped()
      self.initial_eps = 0.
      self.final_eps = 0.
      self.dec_eps = 0.
      self.planner_type = 0
      self.meta_search_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7dBbd.pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.underspecified_start, _x.planning_mode, _x.allocated_planning_time))
      length = len(self.rarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rarm_start))
      length = len(self.larm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.larm_start))
      length = len(self.body_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.body_start))
      length = len(self.rarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rarm_goal))
      length = len(self.larm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.larm_goal))
      length = len(self.body_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.body_goal))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_11d3I.pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.xyz_tolerance, _x.roll_tolerance, _x.pitch_tolerance, _x.yaw_tolerance, _x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs))
      _x = self.rarm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs))
      _x = self.larm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d2b.pack(_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.planner_type, _x.meta_search_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.underspecified_start, _x.planning_mode, _x.allocated_planning_time,) = _struct_7dBbd.unpack(str[start:end])
      self.underspecified_start = bool(self.underspecified_start)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_goal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_goal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_goal = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.xyz_tolerance, _x.roll_tolerance, _x.pitch_tolerance, _x.yaw_tolerance, _x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs,) = _struct_11d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rarm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.larm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.planner_type, _x.meta_search_type,) = _struct_10d2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7dBbd.pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.underspecified_start, _x.planning_mode, _x.allocated_planning_time))
      length = len(self.rarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rarm_start.tostring())
      length = len(self.larm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.larm_start.tostring())
      length = len(self.body_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.body_start.tostring())
      length = len(self.rarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rarm_goal.tostring())
      length = len(self.larm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.larm_goal.tostring())
      length = len(self.body_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.body_goal.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_11d3I.pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.xyz_tolerance, _x.roll_tolerance, _x.pitch_tolerance, _x.yaw_tolerance, _x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs))
      _x = self.rarm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs))
      _x = self.larm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d2b.pack(_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.planner_type, _x.meta_search_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w, _x.underspecified_start, _x.planning_mode, _x.allocated_planning_time,) = _struct_7dBbd.unpack(str[start:end])
      self.underspecified_start = bool(self.underspecified_start)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w, _x.xyz_tolerance, _x.roll_tolerance, _x.pitch_tolerance, _x.yaw_tolerance, _x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs,) = _struct_11d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rarm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.larm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.planner_type, _x.meta_search_type,) = _struct_10d2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10d2b = struct.Struct("<10d2b")
_struct_3I = struct.Struct("<3I")
_struct_11d3I = struct.Struct("<11d3I")
_struct_7dBbd = struct.Struct("<7dBbd")
_struct_7d3I = struct.Struct("<7d3I")
"""autogenerated by genpy from monolithic_pr2_planner_node/GetMobileArmPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import genpy
import std_msgs.msg

class GetMobileArmPlanResponse(genpy.Message):
  _md5sum = "772cf36670d0cc0bb947f449eafd6cce"
  _type = "monolithic_pr2_planner_node/GetMobileArmPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

trajectory_msgs/JointTrajectory trajectory
trajectory_msgs/JointTrajectory body_trajectory


string[] stats_field_names
float64[] stats


================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
float64[] positions
float64[] velocities
float64[] accelerations
duration time_from_start
"""
  __slots__ = ['trajectory','body_trajectory','stats_field_names','stats']
  _slot_types = ['trajectory_msgs/JointTrajectory','trajectory_msgs/JointTrajectory','string[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory,body_trajectory,stats_field_names,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMobileArmPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.stats_field_names is None:
        self.stats_field_names = []
      if self.stats is None:
        self.stats = []
    else:
      self.trajectory = trajectory_msgs.msg.JointTrajectory()
      self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      self.stats_field_names = []
      self.stats = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs))
      _x = self.body_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.body_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.body_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        _v2 = val1.time_from_start
        _x = _v2
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.stats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        _v3 = val1.time_from_start
        _x = _v3
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.body_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.body_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        _v4 = val1.time_from_start
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.body_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        _v5 = val1.time_from_start
        _x = _v5
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs))
      _x = self.body_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.body_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.body_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        _v6 = val1.time_from_start
        _x = _v6
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.stats.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v7 = val1.time_from_start
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.body_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.body_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v8 = val1.time_from_start
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.body_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2i = struct.Struct("<2i")
class GetMobileArmPlan(object):
  _type          = 'monolithic_pr2_planner_node/GetMobileArmPlan'
  _md5sum = '07abbfa71892308caf8b7de3459bc3c4'
  _request_class  = GetMobileArmPlanRequest
  _response_class = GetMobileArmPlanResponse
